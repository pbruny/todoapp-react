{"version":3,"sources":["components/header/Header.js","components/tasks/list/List.js","components/tasks/create_tasks/CreateTasks.js","components/tasks/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar_default","Brand","index_es","icon","size","Component","List","task","window","confirm","concat","name","fetch","id","method","this","props","loadTasks","form","item","done","headers","Accept","Content-Type","body","JSON","stringify","_this","Card_default","Body","Table_default","responsive","tasks","map","index","key","className","href","Object","defineProperty","onClick","checkTask","deleteTask","CreateTask","_useState","useState","_useState2","slicedToArray","title","setTitle","_useState3","_useState4","show","setShow","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","Button_default","e","variant","Modal_default","onHide","closeButton","Title","Form_default","Control","type","placeholder","value","onChange","target","Footer","onSubmit","Tasks","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","response","json","setState","Row_default","Col_default","xs","span","offset","list_List","filter","CreateTasks","library","add","faCheckCircle","faTrashAlt","App","header_Header","Container_default","tasks_Tasks","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b48c4b46.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar>\r\n                    <Navbar.Brand>\r\n                        <FontAwesomeIcon icon=\"check-circle\" size=\"1x\" /> Task Finisher\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nclass List extends Component {\r\n\r\n    async deleteTask(task) {\r\n        const BASE_URL = 'https://heroku-todos-api.herokuapp.com/api/v1';\r\n        const DEST_URL = 'todos/3/items';\r\n        if (window.confirm(`Are you sure you want to delete: \"${task.name}\"`)) {\r\n            await fetch(`${BASE_URL}/${DEST_URL}/${task.id}`, { method: 'DELETE' });\r\n            this.props.loadTasks();\r\n        }\r\n    }\r\n\r\n    async checkTask(task) {\r\n        const BASE_URL = 'https://heroku-todos-api.herokuapp.com/api/v1';\r\n        const DEST_URL = 'todos/3/items';\r\n        let form = { 'item': { 'done': 'true' } }\r\n        await fetch(`${BASE_URL}/${DEST_URL}/${task.id}`,\r\n            {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(form),\r\n            }\r\n        )\r\n\r\n        this.props.loadTasks();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Table responsive>\r\n                            <tbody>\r\n                                {this.props.tasks.map((task, index) => {\r\n                                    return <tr key={task.id}>\r\n                                        <td className=\"col-md-10\">{task.name}</td>\r\n                                        <td>\r\n                                            {\r\n                                                task.done == false\r\n                                                    ? <a className=\"check\" href=\"#\">\r\n                                                        <FontAwesomeIcon icon=\"check-circle\" size=\"lg\" onClick={() => this.checkTask(task)} size=\"lg\"/>\r\n                                                    </a>\r\n                                                    : null\r\n                                            }\r\n                                        </td>\r\n                                        <td>\r\n                                            <a className=\"delete\" href=\"#\" onClick={() => this.deleteTask(task)}>\r\n                                                <FontAwesomeIcon icon=\"trash-alt\" />\r\n                                            </a>\r\n                                        </td>\r\n                                    </tr>;\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React, { useState } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nfunction CreateTask(props) {\r\n    const [title, setTitle] = useState('');\r\n    const [show, setShow] = useState('');\r\n    const BASE_URL = 'https://heroku-todos-api.herokuapp.com/api/v1';\r\n    const DEST_URL = 'todos/3/items';\r\n\r\n    const handleSubmit = (async () => {\r\n        await fetch(`${BASE_URL}/${DEST_URL}`,\r\n            {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    item: { name: title, done: false }\r\n                })\r\n            }\r\n        )\r\n        setShow(false)\r\n        setTitle('')\r\n        props.loadTasks();\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={e => setShow(true)} variant=\"dark\" className=\"float-right create_task_btn\">+ Tasks</Button>\r\n\r\n            <Modal show={show || false} onHide={e => setShow(false)}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>New Task</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Control type=\"email\" placeholder=\"Enter with your task...\" value={title || ''} onChange={e => setTitle(e.target.value)} />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={e => setShow(false)}>\r\n                        Close\r\n             </Button>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Button variant=\"dark\" type=\"submit\">\r\n                            Create\r\n               </Button>\r\n                    </form>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateTask;","import React, { Component } from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport List from './list/List';\r\nimport CreateTask from './create_tasks/CreateTasks';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass Tasks extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tasks: []\r\n        };\r\n        this.loadTasks = this.loadTasks.bind(this);\r\n    }\r\n\r\n    async loadTasks() {\r\n        const BASE_URL = 'https://heroku-todos-api.herokuapp.com/api/v1';\r\n        const DEST_URL = 'todos/3/items';\r\n        let response = await fetch(`${BASE_URL}/${DEST_URL}`);\r\n        const tasks = await response.json();\r\n        this.setState({ tasks: tasks });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadTasks();\r\n    }\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={{ span: 8, offset: 2 }} className=\"tasks_list\">\r\n                    <p className=\"title\">To-do</p>\r\n                    <List loadTasks={this.loadTasks} tasks={this.state.tasks.filter((task) => task.done != true)}/>\r\n                    <CreateTask loadTasks={this.loadTasks}/>\r\n                </Col>\r\n                <Col xs={{ span: 8, offset: 2 }} className=\"tasks_list\">\r\n                    <p className=\"title\">Done</p>\r\n                    <List loadTasks={this.loadTasks} tasks={this.state.tasks.filter((task) => task.done == true)}/>\r\n                    <Button variant=\"danger\" className=\"float-right remove_tasks_btn mt-2 mb-2\">Remove all tasks</Button>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tasks;","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container'\n\nimport Header from './components/header/Header';\nimport Tasks from './components/tasks/Tasks';\n\nimport './App.scss';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faCheckCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faCheckCircle, faTrashAlt)\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Container>\n          <Tasks/>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCheckCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCheckCircle, faTrashAlt)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}